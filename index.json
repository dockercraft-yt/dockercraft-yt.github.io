
[{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/docker/","section":"Docker","summary":"","title":"Docker","type":"docker"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/","section":"DockerCrafts Blog","summary":"","title":"DockerCrafts Blog","type":"page"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/posts/test/","section":"Posts","summary":"","title":"Test","type":"posts"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/smarthome/homeassistant/","section":"Smarthome","summary":"","title":"HomeAssistant","type":"smarthome"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/homelab/","section":"Tags","summary":"","title":"Homelab","type":"tags"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/smarthome/","section":"Smarthome","summary":"","title":"Smarthome","type":"smarthome"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/smarthome/","section":"Tags","summary":"","title":"Smarthome","type":"tags"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/homelab/","section":"Homelab","summary":"","title":"Homelab","type":"homelab"},{"content":" üß∞ DockerCraft Homelab ‚Äì System√ºbersicht # Dieses System bildet das Herz meines DockerCraft-Homelabs ‚Äì optimiert f√ºr Container, Virtualisierung und zuverl√§ssigen 24/7-Betrieb. Die folgende Dokumentation beschreibt die Kernkomponenten meiner Hardware-Umgebung.\nüß† Prozessor (CPU) # Modell: AMD Ryzen 7 3700X\nArchitektur: 8 Kerne / 16 Threads\nBasistakt: 3,6 GHz\nBoost: bis zu 4,4 GHz\nSockel: AM4\nBesonderheiten: SMT, AVX2, AES, Virtualisierung (SVM), 64-Bit-Unterst√ºtzung\nüß© Mainboard # Modell: MSI X470 GAMING PRO MAX (MS-7B79)\nChipsatz: AMD X470\nBIOS-Version: M.C0 (04/2022)\nFormfaktor: ATX\nBesonderheiten:\nUnterst√ºtzung f√ºr PCIe 3.0 bis zu 128 GB DDR4 Dual M.2 NVMe Slots integrierter Realtek 1 Gbit/s LAN üíæ Arbeitsspeicher (RAM) # Gesamtgr√∂√üe: 32 GB DDR4 (2 √ó 16 GB)\nModell: Corsair Vengeance LPX (CMK32GX4M2A2666C16)\nTakt: 2666 MHz\nKan√§le: Dual Channel\n‚ö° Cache-Speicher (NVMe RAID1) # Laufwerk Modell Kapazit√§t Ger√§t Cache Samsung SSD 980 1 TB 1 TB nvme1n1 Cache 2 Samsung SSD 980 1 TB 1 TB nvme0n1 Dateisystem: Btrfs RAID1\nGesamtkapazit√§t: 1 TB\nMountpoint: /mnt/cache\nüìÄ Data Cache (RAID1) # Laufwerk Modell Kapazit√§t Ger√§t Data Cache WD Red SA500 2.5\u0026quot; 2 TB 2 TB sdf Data Cache 2 WD Red SA500 2.5\u0026quot; 2 TB 2 TB sdh Dateisystem: Btrfs RAID1\nGesamtkapazit√§t: 2 TB\nMountpoint: /mnt/data_cache\nüß± Array-Speicher (Parity + Data) # Typ Laufwerk Modell Kapazit√§t Ger√§t Parity WDC WD40EFRX-68N32N0 4 TB sdc Disk 1 WDC WD20SPZX-22UA7T0 2 TB sdg Disk 2 WDC WD20SPZX-22UA7T0 2 TB sde Disk 3 WDC WD20EFRX-68EUZN0 2 TB sdd Disk 4 WDC WD40EFRX-68N32N0 4 TB sdb Gesamtkapazit√§t (brutto): 14 TB\nNutzbar (netto, ohne Parity): 10 TB\nüåê Netzwerk # Adapter: Realtek RTL8111/8168/8411 Gigabit Ethernet Controller\nSchnittstelle: PCI Express x1\nTreiber: r8169\nGeschwindigkeit: 1 Gbit/s Full Duplex\nMAC-Adresse: (aus Datenschutzgr√ºnden ausgeblendet)\nüîå Peripherie \u0026amp; I/O # USB Controller: ASMedia ASM1042A (USB 3.0 Host) Bluetooth: CSR8510 A10 Dongle Optisches Laufwerk: HL-DT-ST BD-RE BH16NS40 (Blu-ray Writer) üßæ Zusammenfassung # Komponente Modell / Details CPU AMD Ryzen 7 3700X Mainboard MSI X470 Gaming Pro Max RAM 32 GB Corsair Vengeance LPX DDR4 2666 Cache (NVMe RAID1) 2√ó Samsung SSD 980 1 TB Data Cache (RAID1) 2√ó WD Red SA500 2 TB Array (Parity + 4 Disks) WD Red/Blue Mix (4 TB + 3√ó 2 TB + 4 TB) Netzwerk Realtek RTL8111 1 Gbit/s OS / Plattform Unraid 6.12.24 BIOS AMI v M.C0 (04/2022) ","date":"10.10.2025","externalUrl":null,"permalink":"/homelab/unraid-server/","section":"Homelab","summary":"","title":"Unraid Server","type":"homelab"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" üîÅ Restore: So stellst du Vaultwarden aus dem Backup wieder her # Ein Backup ist nur so gut wie seine Wiederherstellung.\nAlso testen wir, ob du im Notfall auch wirklich wieder an deine Daten kommst.\nüì¶ Schritt-f√ºr-Schritt Anleitung # Vaultwarden-Container stoppen\ndocker stop vaultwarden Backup ausw√§hlen und entpacken\ncd /mnt/user/backups/vaultwarden ls -lh tar -xzvf vaultwarden_backup_YYYY-MM-DD_HH-MM-SS.tar.gz -C / üîé Tipp: Das Archiv enth√§lt /mnt/user/appdata/vaultwarden.\nBeim Entpacken nach / werden also die originalen Vaultwarden-Daten wiederhergestellt.\nDateirechte pr√ºfen\nchown -R nobody:users /mnt/user/appdata/vaultwarden chmod -R 770 /mnt/user/appdata/vaultwarden Container starten\ndocker start vaultwarden Testlauf machen\n√ñffne deine Vaultwarden-Weboberfl√§che und pr√ºfe, ob alle Logins, Sammlungen und Anh√§nge verf√ºgbar sind.\nüß† Tipp f√ºr Fortgeschrittene # Wenn du dein Backup lieber manuell pr√ºfen m√∂chtest, ohne gleich alles zu √ºberschreiben:\nmkdir /mnt/user/temp/vaultwarden_restore_test tar -xzvf vaultwarden_backup_YYYY-MM-DD_HH-MM-SS.tar.gz -C /mnt/user/temp/vaultwarden_restore_test So kannst du vorher reinschauen, was im Archiv steckt, bevor du etwas √ºberschreibst.\nüö® Wiederherstellung testen! # Viele Admins machen den Fehler, Backups nie zu testen.\nEinmal im Quartal solltest du in einer sicheren Umgebung (z. B. Test-VM oder Backup-Unraid-Server) die Wiederherstellung durchspielen.\nNur so wei√üt du, dass dein Backup wirklich funktioniert ‚Äì bevor es zu sp√§t ist.\n","date":"10.10.2025","externalUrl":null,"permalink":"/docker/vaultwardenrestore/","section":"Docker","summary":"","title":"Vaultwarden Restore","type":"docker"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/backup/","section":"Tags","summary":"","title":"Backup","type":"tags"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/vaultwarden/","section":"Tags","summary":"","title":"Vaultwarden","type":"tags"},{"content":"\nVaultwarden ist eine schlanke, selbst gehostete Alternative zu Bitwarden ‚Äì perfekt f√ºr alle, die ihre Passw√∂rter lieber selbst unter Kontrolle haben.\nAber: Wer selbst hostet, tr√§gt auch selbst Verantwortung. Wenn deine Datenbank oder dein Container hopsgeht, ist dein Tresor futsch.\nUnd genau deshalb braucht dein Vaultwarden ein sauberes Backup.\nIn diesem Beitrag zeige ich dir, wie du ein automatisiertes Backup deiner Vaultwarden-Daten auf deinem Unraid-System einrichtest ‚Äì mit einem simplen, aber effektiven Bash-Skript.\nüß© Warum du Vaultwarden unbedingt sichern solltest # Vaultwarden speichert:\ndeine komplette Passwortdatenbank (SQLite oder PostgreSQL) Konfigurationen, Zertifikate und Icons 2FA-Daten (falls du OTP nutzt) All das liegt im Docker-Volume unter /mnt/user/appdata/vaultwarden.\nWenn deine SSD stirbt oder ein Update fehlschl√§gt, sind diese Daten ohne Backup unwiederbringlich verloren.\nüí° Merksatz: Kein Backup = kein Mitleid.\nüß∞ Voraussetzungen # Unraid-Server mit Docker Vaultwarden als Container installiert Zugriff auf die Unraid-Konsole oder SSH Basiswissen in Bash UserScripts als Plugin installiert ‚öôÔ∏è Das Backup-Skript # Erstelle auf deinem Unraid-Server ein neues Skript, z. B. unter:\n/boot/config/plugins/user.scripts/scripts/vaultwarden_backup/script\nF√ºge folgenden Inhalt ein:\n#!/bin/bash # ========================================================= # Vaultwarden Backup Script (f√ºr Unraid) # Autor: Stefan / DockerCraft # Beschreibung: # - Stoppt den Vaultwarden-Container # - Erstellt ein tar.gz-Backup der AppData # - Startet den Container wieder # - L√∂scht Backups √§lter als 30 Tage # ========================================================= set -euo pipefail # Script bricht bei Fehlern sauber ab # === Einstellungen === DATE=$(date +%Y-%m-%d_%H-%M-%S) CONTAINER=\u0026#34;vaultwarden\u0026#34; CONTAINER_DATA_DIR=\u0026#34;/mnt/user/appdata/vaultwarden\u0026#34; BACKUP_DIR=\u0026#34;/mnt/user/Backup/vaultwarden\u0026#34; BACKUP_FILE=\u0026#34;${BACKUP_DIR}/vaultwarden-${DATE}.tar.gz\u0026#34; LOGFILE=\u0026#34;${BACKUP_DIR}/backup.log\u0026#34; # === Vorbereitung === mkdir -p \u0026#34;$BACKUP_DIR\u0026#34; echo \u0026#34;[$(date)] === Vaultwarden Backup gestartet ===\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; # === Container stoppen (nur wenn er l√§uft) === if docker ps --format \u0026#39;{{.Names}}\u0026#39; | grep -q \u0026#34;^${CONTAINER}$\u0026#34;; then echo \u0026#34;[$(date)] Stoppe Container: $CONTAINER\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; docker stop \u0026#34;$CONTAINER\u0026#34; \u0026gt;\u0026gt; \u0026#34;$LOGFILE\u0026#34; 2\u0026gt;\u0026amp;1 else echo \u0026#34;[$(date)] Container \u0026#39;$CONTAINER\u0026#39; l√§uft nicht ‚Äì √ºberspringe Stop.\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; fi # === Backup erstellen === echo \u0026#34;[$(date)] Erstelle Backup unter: $BACKUP_FILE\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; tar -czf \u0026#34;$BACKUP_FILE\u0026#34; -C \u0026#34;$CONTAINER_DATA_DIR\u0026#34; . \u0026gt;\u0026gt; \u0026#34;$LOGFILE\u0026#34; 2\u0026gt;\u0026amp;1 # === Container wieder starten === echo \u0026#34;[$(date)] Starte Container: $CONTAINER\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; docker start \u0026#34;$CONTAINER\u0026#34; \u0026gt;\u0026gt; \u0026#34;$LOGFILE\u0026#34; 2\u0026gt;\u0026amp;1 # === Alte Backups l√∂schen (√§lter als 30 Tage) === echo \u0026#34;[$(date)] L√∂sche Backups √§lter als 30 Tage ...\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; find \u0026#34;$BACKUP_DIR\u0026#34; -type f -name \u0026#34;*.tar.gz\u0026#34; -mtime +30 -exec rm -v {} \\; \u0026gt;\u0026gt; \u0026#34;$LOGFILE\u0026#34; 2\u0026gt;\u0026amp;1 echo \u0026#34;[$(date)] === Backup erfolgreich abgeschlossen ===\u0026#34; | tee -a \u0026#34;$LOGFILE\u0026#34; exit 0 üß† Wie das Script funktioniert # Container stoppen ‚Äì Verhindert, dass w√§hrend des Backups Schreibzugriffe auf die Datenbank passieren. Daten sichern ‚Äì Alle wichtigen Dateien aus /mnt/user/appdata/vaultwarden werden in ein komprimiertes .tar.gz gepackt. Container neu starten ‚Äì Vaultwarden l√§uft danach wieder ganz normal. Alte Backups l√∂schen ‚Äì Automatisch werden alle Backups, die √§lter als 7 Tage sind, entfernt. üïí Automatisierung in Unraid # Damit du nicht jedes Mal manuell sichern musst, kannst du das Ganze mit dem User Scripts Plugin automatisieren:\n√ñffne das Plugin User Scripts in Unraid. W√§hle das Script vaultwarden_backup. Stelle die Ausf√ºhrung z. B. t√§glich um 3 Uhr nachts ein. So l√§uft dein Backup vollautomatisch im Hintergrund ‚Äì ohne manuelles Eingreifen.\n‚òÅÔ∏è Bonus-Tipp: Offsite-Backup # Ein Backup auf dem gleichen Server hilft dir nicht, wenn die Kiste abbrennt oder die Platte stirbt.\nDeshalb empfehle ich zus√§tzlich:\nRclone ‚Üí f√ºr automatischen Upload zu Google Drive, Dropbox oder OneDrive rsync √ºber SSH ‚Üí um Backups auf ein NAS oder einen anderen Server zu spiegeln Externes USB-Laufwerk ‚Üí f√ºr manuelles, aber physisch getrenntes Backup Beispiel mit Rclone:\nrclone copy /mnt/user/backups/vaultwarden remote:unraid_backups/vaultwarden --progress ‚úÖ Fazit # Mit dem zus√§tzlichen Restore-Teil ist dein Vaultwarden-Backup nun vollst√§ndig abgesichert:\nAutomatische, versionierte Backups Alte Sicherungen werden bereinigt Restore ist sauber dokumentiert Optionaler Offsite-Sync f√ºr maximale Sicherheit Damit hast du dein Passwort-Manager-System auf Unraid nicht nur selbst in der Hand ‚Äì sondern auch unter Kontrolle, wenn mal was schiefgeht. üí™\nüîí Selbst gehostet ist cool. Aber erst mit Backup ist es wirklich sicher.\n","date":"10.10.2025","externalUrl":null,"permalink":"/docker/vaultwardenbackup/","section":"Docker","summary":"","title":"Vaultwarden Backup","type":"docker"},{"content":"","date":"10.10.2025","externalUrl":null,"permalink":"/tags/paperless-ngx/","section":"Tags","summary":"","title":"Paperless-Ngx","type":"tags"},{"content":" √úbersicht # Dieses Script erstellt ein automatisiertes Backup des Paperless-NGX Containers auf einem Unraid-System.\nEs exportiert die Dokumente √ºber den integrierten document_exporter, komprimiert sie als .zip und l√∂scht alte Backups sowie Log-Dateien automatisch.\nFunktionsweise # Alte Backups und Logs werden gel√∂scht (√§lter als varDaysOlder Tage) Ein neues Backup wird √ºber docker exec im Container Paperless-NGX erstellt Das Backup wird im definierten Backup-Verzeichnis gespeichert Alle Aktionen werden in eine Log-Datei geschrieben Voraussetzungen # Ein laufender Paperless-NGX Docker-Container Schreibrechte im Backup-Verzeichnis /mnt/user/Backup/paperless Das Script wird als root oder admin ausgef√ºhrt Das Verzeichnis f√ºr Logs existiert (wird automatisch angelegt) Script-Inhalt # #!/bin/bash # === Laufzeit-Variablen === varRunTime=$(date +%Y%m%d_%H%M%S) varDaysOlder=7 LOG_DIR=\u0026#34;/mnt/user/Backup/paperless/logs\u0026#34; LOG_FILE=\u0026#34;${LOG_DIR}/paperless-backup_${varRunTime}.log\u0026#34; # === Environment fix f√ºr Cron === export PATH=\u0026#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026#34; export LANG=\u0026#34;C\u0026#34; # === Verzeichnisse === BACKUP_DIR=\u0026#34;/mnt/user/Backup/paperless\u0026#34; CONTAINER=\u0026#34;paperless-ngx\u0026#34; # === Logging-Verzeichnis sicherstellen === mkdir -p \u0026#34;$LOG_DIR\u0026#34; { echo \u0026#34;+++++++++ $(date +%Y%m%d_%H%M%S) - paperless Backup-Script gestartet +++++++++\u0026#34; echo echo \u0026#34;+++++++++ $(date +%Y%m%d_%H%M%S) - L√∂sche Backups √§lter als ${varDaysOlder} Tage +++++++++\u0026#34; find \u0026#34;$BACKUP_DIR\u0026#34; -type f -name \u0026#39;*.zip\u0026#39; -mtime +$varDaysOlder -print find \u0026#34;$BACKUP_DIR\u0026#34; -type f -name \u0026#39;*.zip\u0026#39; -mtime +$varDaysOlder -exec rm -v {} \\; echo echo \u0026#34;+++++++++ $(date +%Y%m%d_%H%M%S) - L√∂sche Logs √§lter als ${varDaysOlder} Tage +++++++++\u0026#34; find \u0026#34;$LOG_DIR\u0026#34; -type f -name \u0026#39;*.log\u0026#39; -mtime +$varDaysOlder -print find \u0026#34;$LOG_DIR\u0026#34; -type f -name \u0026#39;*.log\u0026#39; -mtime +$varDaysOlder -exec rm -v {} \\; echo echo \u0026#34;+++++ $(date +%Y%m%d_%H%M%S) - paperless Export gestartet +++++\u0026#34; docker exec -t \u0026#34;$CONTAINER\u0026#34; document_exporter ../export --delete --compare-checksums --zip --zip-name ../backup/paperless-backup_${varRunTime} echo echo \u0026#34;+++++ $(date +%Y%m%d_%H%M%S) - paperless Export beendet +++++\u0026#34; echo \u0026#34;+++++++++ $(date +%Y%m%d_%H%M%S) - paperless Backup-Script beendet +++++++++\u0026#34; echo } \u0026gt;\u0026gt; \u0026#34;$LOG_FILE\u0026#34; 2\u0026gt;\u0026amp;1 Installation auf Unraid # Erstelle das Script unter:\n/boot/config/scripts/paperless_backup.sh Vergib Ausf√ºhrungsrechte:\nchmod +x /boot/config/scripts/paperless_backup.sh Erstelle bei Bedarf den Backup-Ordner:\nmkdir -p /mnt/user/Backup/paperless/logs Automatische Ausf√ºhrung # Variante 1: User Scripts Plugin # √ñffne das User Scripts Plugin im Unraid Webinterface Neues Script anlegen ‚Üí Scriptinhalt einf√ºgen Zeitplan festlegen (z.‚ÄØB. t√§glich um 2 Uhr) Option ‚ÄûRun in background‚Äú aktivieren Variante 2: Cronjob # Alternativ √ºber die Konsole:\n0 2 * * * /boot/config/scripts/paperless_backup.sh Logs \u0026amp; Fehleranalyse # Logs liegen unter:\n/mnt/user/Backup/paperless/logs/ Letzte 20 Zeilen ansehen:\ntail -n 20 /mnt/user/Backup/paperless/logs/paperless-backup_*.log Wenn das Script per Cron l√§uft, beachte:\nPATH und LANG werden im Script gesetzt, damit find, rm, docker etc. funktionieren. Alle Fehler werden ebenfalls in die Log-Datei umgeleitet. Beispiel Docker Compose Konfiguration # ‚ö†Ô∏è WICHTIG: Unter volumes: muss ein Backup-Verzeichnis gemountet werden!\nOhne dieses Volume kann der document_exporter die Backups nicht im Host-System speichern.\nservices: paperless-ngx: container_name: paperless-ngx environment: - TZ=Europe/Berlin - PAPERLESS_REDIS=redis://default:redis@192.168.178.2:6379 - PAPERLESS_OCR_LANGUAGE=deu - PAPERLESS_OCR_LANGUAGES=deu - PAPERLESS_FILENAME_FORMAT={{ created_year }}/{{ created_month }}/{{ added_year }}{{ added_month }}{{ added_day }}-{{ title }} - PAPERLESS_TIME_ZONE=Europe/Berlin - PAPERLESS_CONSUMER_ENABLE_ASN_BARCODE=true - PAPERLESS_CONSUMER_ASN_BARCODE_PREFIX=ASN - PAPERLESS_CONSUMER_ENABLE_BARCODES=true - PAPERLESS_CONSUMER_BARCODE_SCANNER=ZXING - PAPERLESS_CONSUMER_BARCODE_STRING=PATCHT - PAPERLESS_ENABLE_HTTP_REMOTE_USER=true - PAPERLESS_IGNORE_DATES= - PAPERLESS_CONSUMER_POLLING=120 - PAPERLESS_SECRET_KEY=KEY - USERMAP_UID=99 - USERMAP_GID=100 ports: - 27030:8000/tcp volumes: - /mnt/user/appdata/paperless-ngx/data:/usr/src/paperless/data - /mnt/user/paperless/media/:/usr/src/paperless/media - /mnt/user/paperless/consume/:/usr/src/paperless/consume - /mnt/user/paperless/export/:/usr/src/paperless/export - /mnt/user/Backup/paperless:/usr/src/paperless/backup # \u0026lt;- Backup Volume ist zwingend erforderlich! - /mnt/user/paperless/custom_scripts:/custom-cont-init.d:ro - /mnt/user/paperless/consume_script:/usr/src/paperless/scripts image: ghcr.io/paperless-ngx/paperless-ngx Bekannte Probleme \u0026amp; L√∂sungen # Problem Ursache L√∂sung Alte Backups werden nicht gel√∂scht -execdir funktioniert unter Cron nicht zuverl√§ssig Im Script wurde -exec verwendet docker exec schl√§gt fehl Containername falsch Namen in CONTAINER= pr√ºfen Kein Logfile wird erstellt Pfad fehlt oder keine Rechte mkdir -p /mnt/user/Backup/paperless/logs ausf√ºhren Script l√§uft manuell, aber nicht automatisch Cron-Umgebung unvollst√§ndig PATH im Script wie oben gesetzt halten Backups leer oder nicht sichtbar Kein Backup-Verzeichnis in Docker Compose Volume /mnt/user/Backup/paperless:/usr/src/paperless/backup hinzuf√ºgen Version \u0026amp; Autor # Version: 1.2 (Unraid-optimiert, Oktober 2025) Autor: Stefan Plattform: Unraid Container: paperless-ngx ","date":"10.10.2025","externalUrl":null,"permalink":"/docker/paperlessngxbackup/","section":"Docker","summary":"","title":"paperless-NGX Backup","type":"docker"},{"content":"Hey, ich bin Stefan ‚Äì Fachinformatiker f√ºr Systemintegration und leidenschaftlicher Technik-T√ºftler.\nIm Beruf wie privat dreht sich bei mir alles um IT-Infrastruktur, Homelabs und Container-Technologien.\nüß† Was mich antreibt # Ich liebe es, Systeme zu verstehen, zu optimieren und anderen zu zeigen, wie Technik wirklich funktioniert ‚Äì nicht nur theoretisch, sondern praxisnah.\nAus dieser Motivation heraus ist auch mein Projekt DockerCraft entstanden ‚Äì ein YouTube-Kanal und Wissensprojekt rund um:\nüê≥ Docker \u0026amp; Container-Technologien üß© Homelab-Setups \u0026amp; Virtualisierung üè° SmartHome-Integration Mein Ziel ist es, komplexe Themen verst√§ndlich zu machen und anderen den Einstieg in diese spannenden Bereiche zu erleichtern.\n‚öôÔ∏è Technische Schwerpunkte # Container \u0026amp; Virtualisierung: Docker, Portainer Systemintegration: Windows- \u0026amp; Linux-Server, Netzwerke Automation \u0026amp; Monitoring: Grafana, Uptime Kuma, Authentik Homelab-Management: Backup, Ressourceneffizienz Technischer Support \u0026amp; Troubleshooting: von der Fehlersuche bis zur nachhaltigen L√∂sung üé• Projekte \u0026amp; Content # Auf meinem Kanal DockerCraft ver√∂ffentliche ich regelm√§√üig Tutorials, Setups und Showcases:\nIch zeige Container, die dein Homelab wirklich besser machen, und erkl√§re nicht nur das \u0026ldquo;Wie\u0026rdquo;, sondern auch das \u0026ldquo;Warum\u0026rdquo;.\n‚ÄûIch will, dass Leute verstehen, was hinter den Tools steckt ‚Äì nicht nur, wie man sie klickt.‚Äú\nNeben YouTube nutze ich auch Instagram und TikTok, um kurze Tipps, Workarounds und kleine Aha-Momente zu teilen.\nüí° Meine Philosophie # ‚ÄûTechnik ist kein Selbstzweck ‚Äì sie soll das Leben einfacher machen.‚Äú\nIch glaube an saubere Strukturen, durchdachte Systeme und offene Wissensvermittlung.\nOb privat im Homelab oder beruflich im Support: Mein Anspruch ist immer, L√∂sungen zu schaffen, die bleiben.\nüì¨ Kontakt # Wenn du Ideen, Fragen oder einfach Lust auf einen fachlichen Austausch hast,\nmelde dich gern:\nüåê DockerCraft auf YouTube üåê DockerCraft auf Instagram üåê DockerCraft auf TikTok üíº GitHub Profil ‚ÄûWissen teilen ist der schnellste Weg, selbst besser zu werden.‚Äú\n‚Äì Stefan\n","date":"10.10.2025","externalUrl":null,"permalink":"/aboutme/","section":"DockerCrafts Blog","summary":"","title":"√úber mich","type":"page"},{"content":"","externalUrl":null,"permalink":"/archive/","section":"Archive","summary":"","title":"Archive","type":"archive"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]